name: Build and Release Installers

on:
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  version:
    name: Determine version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.getver.outputs.version }}
      tag: ${{ steps.getver.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - id: getver
        name: Read version from package.json
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=v$VERSION" >> "$GITHUB_OUTPUT"

  build:
    name: Build installers (${{ matrix.os }})
    needs: version
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci --force

      - name: Build installers with Electron Forge (skip signing)
        run: npm run make

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          if-no-files-found: warn
          path: |
            out/make/**/*.zip
            out/**/*.zip
            out/make/**/*.exe
            out/make/**/*.nupkg
            out/make/**/RELEASES
            out/make/**/*.deb

  release:
    name: Create GitHub Release and upload installers
    needs: [version, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List downloaded files
        run: ls -R dist | cat

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version.outputs.tag }}
          name: ${{ needs.version.outputs.tag }}
          generate_release_notes: true
          make_latest: true
          files: |
            dist/**/*.zip
            dist/**/*.exe
            dist/**/*.nupkg
            dist/**/*.deb
            dist/**/RELEASES
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
